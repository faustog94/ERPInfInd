/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Models.DetalleRuta;
import Models.Estructura;
import Models.Materiales;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author franco
 */
public class AltaRutaFabUI2 extends javax.swing.JDialog {

    //Instancia de AltaRutaFabUI que lo crea
    AltaRutaFabUI ventanaPadre;
    //HashMap que relaciona los centros de trabajo listados con un id
    HashMap<String, Integer> centros = new HashMap<String, Integer>();
    //HashMap que relaciona art con un id de estructura
    HashMap<String, Integer> artEstructura = new HashMap<String, Integer>();
    //Modelos de las tablas
    DefaultTableModel tmodelArt, tmodelMat;
    
    public AltaRutaFabUI2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        ventanaPadre = (AltaRutaFabUI) parent;
        initComponents();
        tmodelArt = (DefaultTableModel) tb_articulos.getModel();
        tmodelMat = (DefaultTableModel) tb_materiales.getModel();
        poblarCentrosTrabajo();
        poblarTablaArticulos();
    }
    
    private void poblarCentrosTrabajo() {
        cb_centrosTrabajo.addItem("Elegir centro de trabajo...");
        for (int i = 0; i < ventanaPadre.centrosDisponibles.size(); i++) {
            String descCentroTrabajo = ventanaPadre.centrosDisponibles.get(i).getCodCentro() + " - " + ventanaPadre.centrosDisponibles.get(i).getDescripcion();
            centros.put(descCentroTrabajo, ventanaPadre.centrosDisponibles.get(i).getIdCentro());
            cb_centrosTrabajo.addItem(descCentroTrabajo);
        }
    }
    
    private void poblarTablaArticulos() {
        tmodelArt.setRowCount(0);
        for (Estructura est : ventanaPadre.estructuras.values()) {
            String descArticulo = ventanaPadre.helper.obtenerArt(est.getIdArticulo());
            artEstructura.put(descArticulo, est.getIdEstructura());
            Object[] row = new Object[]{descArticulo, est.getCantidad()};
            tmodelArt.addRow(row);
        }
        tb_articulos.setModel(tmodelArt);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cb_centrosTrabajo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_manoObra = new javax.swing.JTextField();
        txt_maq = new javax.swing.JTextField();
        txt_reposo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_articulos = new javax.swing.JTable();
        btn_añadirEntrada = new javax.swing.JButton();
        btn_sacar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_materiales = new javax.swing.JTable();
        btn_añadirSalida = new javax.swing.JButton();
        btn_añadir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Centro de Trabajo");

        cb_centrosTrabajo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        jLabel2.setText("Horas Mano Obra");

        jLabel3.setText("Horas Maquinaria");

        jLabel4.setText("Horas Reposo");

        tb_articulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Articulo", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_articulos.setColumnSelectionAllowed(true);
        tb_articulos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tb_articulos);
        tb_articulos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tb_articulos.getColumnModel().getColumnCount() > 0) {
            tb_articulos.getColumnModel().getColumn(0).setResizable(false);
            tb_articulos.getColumnModel().getColumn(1).setResizable(false);
        }

        btn_añadirEntrada.setText("-> Entrada");
        btn_añadirEntrada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_añadirEntradaMouseClicked(evt);
            }
        });

        btn_sacar.setText("<-");
        btn_sacar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_sacarMouseClicked(evt);
            }
        });

        tb_materiales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Articulo", "Cantidad", "Tipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_materiales.setColumnSelectionAllowed(true);
        tb_materiales.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tb_materiales);
        tb_materiales.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tb_materiales.getColumnModel().getColumnCount() > 0) {
            tb_materiales.getColumnModel().getColumn(0).setResizable(false);
            tb_materiales.getColumnModel().getColumn(1).setResizable(false);
            tb_materiales.getColumnModel().getColumn(2).setResizable(false);
        }

        btn_añadirSalida.setText("-> Salida");
        btn_añadirSalida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_añadirSalidaMouseClicked(evt);
            }
        });

        btn_añadir.setText("Añadir");
        btn_añadir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_añadirMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_manoObra, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_reposo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(txt_maq, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_añadirSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_añadirEntrada)
                                    .addComponent(btn_sacar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cb_centrosTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_añadir)
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cb_centrosTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_añadir))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_manoObra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_maq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_reposo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btn_añadirEntrada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_añadirSalida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_sacar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_añadirEntradaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_añadirEntradaMouseClicked
        btnAñadirTipo(true);
    }//GEN-LAST:event_btn_añadirEntradaMouseClicked

    private void btn_añadirSalidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_añadirSalidaMouseClicked
        btnAñadirTipo(false);
    }//GEN-LAST:event_btn_añadirSalidaMouseClicked

    private void btn_sacarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_sacarMouseClicked
        if (tb_materiales.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un artículo a quitar");
            return;
        }
        String articulo = String.valueOf(tb_materiales.getValueAt(tb_materiales.getSelectedRow(), 0));
        int cantidad = Integer.parseInt(JOptionPane.showInputDialog(this,
                "Cantidad a quitar:",
                JOptionPane.QUESTION_MESSAGE));
        int valorMax = (Integer) tb_materiales.getValueAt(tb_materiales.getSelectedRow(), 1);
        if (cantidad > valorMax) {
            JOptionPane.showMessageDialog(this, "El valor no debe ser mayor a " + valorMax);
            return;
        }

        //Modificaciones de la tabla derecha
        if (cantidad == valorMax) {//Si saco el máximo disponible, se va de la tabla, sino se modifica
            tmodelMat.removeRow(tb_materiales.getSelectedRow());
        } else {
            tb_materiales.setValueAt(valorMax - cantidad, tb_materiales.getSelectedRow(), 1);
        }

        //Modificaciones tabla izquierda
        int filaExistente = existeenTablaArt(articulo);
        if (filaExistente > -1) {
            tb_articulos.setValueAt((int) tmodelArt.getValueAt(filaExistente, 1) + cantidad, filaExistente, 1);
        } else {
            Object[] row = new Object[]{articulo, cantidad};
            tmodelArt.addRow(row);
        }
    }//GEN-LAST:event_btn_sacarMouseClicked

    private void btn_añadirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_añadirMouseClicked
        if (cb_centrosTrabajo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Centro de Trabajo");
            return;
        }
        if (txt_manoObra.getText().isEmpty() || txt_maq.getText().isEmpty() || txt_reposo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Faltan datos por completar");
            return;
        }
        if (tb_materiales.getRowCount() == 0){
            JOptionPane.showMessageDialog(this, "Debe haber al menos un artículo añadido");
            return;
        }

        //Convierto todo a instancias
        ArrayList<Materiales> materiales = new ArrayList();
        DetalleRuta detalle = new DetalleRuta();
        detalle.setIdCentro(centros.get(cb_centrosTrabajo.getSelectedItem()));
        detalle.setTiempoManoObra(Double.valueOf(txt_manoObra.getText()));
        detalle.setTiempoMaquina(Double.valueOf(txt_maq.getText()));
        detalle.setTiempoReposo(Double.valueOf(txt_reposo.getText()));
        detalle.setOrden(ventanaPadre.orden);
        ventanaPadre.detallesRuta.put(ventanaPadre.orden, detalle);
        //Aumento el orden para que el proximo sea el siguiente
        ventanaPadre.orden++;
        for (int i = 0; i < tb_materiales.getRowCount(); i++) {
            Materiales mat = new Materiales();
            //Cantidad, idTipo, idArticulo
            mat.setCantidad((int) tb_materiales.getValueAt(i, 1));
            if ((String.valueOf(tb_materiales.getValueAt(i, 2))).equals("Entrada")) {
                mat.setIdTipoMateriales(1);
            } else {
                mat.setIdTipoMateriales(2);
            }
            mat.setIdArticulo(ventanaPadre.estructuras.get(artEstructura.get(String.valueOf(tb_materiales.getValueAt(i, 0)))).getIdArticulo()); //Obtiene el ID de estructura a partir del articulo, busca el id de articulo en la otra ventana a partir de ese id de estructura
            mat.setDetruta(detalle);
            materiales.add(mat);
        }
        //Lo guardo en la otra ventana
        ventanaPadre.detallesMateriales.put(detalle.getOrden(), materiales);

        //Descuento de las estructuras disponibles
        for (int i = 0; i < tb_materiales.getRowCount(); i++) {
            int idEstructura = artEstructura.get(String.valueOf(tb_materiales.getValueAt(i, 0)));
            int cantidad = (int) tb_materiales.getValueAt(i, 1);
            
            Estructura est = ventanaPadre.estructuras.get(idEstructura);
            if (est.getCantidad() == cantidad) {
                ventanaPadre.estructuras.remove(idEstructura);
            } else {
                est.setCantidad(est.getCantidad() - cantidad);
                ventanaPadre.estructuras.put(idEstructura, est);
            }
        }
        ventanaPadre.poblarTablaDetalles();
        this.dispose();
    }//GEN-LAST:event_btn_añadirMouseClicked
    
    private void btnAñadirTipo(boolean esEntrada) {
        if (tb_articulos.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un artículo a añadir");
            return;
        }
        String articulo = String.valueOf(tb_articulos.getValueAt(tb_articulos.getSelectedRow(), 0));
        int cantidad = Integer.parseInt(JOptionPane.showInputDialog(this,
                "Cantidad a añadir:",
                JOptionPane.QUESTION_MESSAGE));
        int valorMax = (Integer) tb_articulos.getValueAt(tb_articulos.getSelectedRow(), 1);
        if (cantidad > valorMax) {
            JOptionPane.showMessageDialog(this, "El valor no debe ser mayor a " + valorMax);
            return;
        }

        //Modificaciones tabla izq
        if (cantidad == valorMax) {//Si saco el máximo disponible, se va de la tabla, sino se modifica
            tmodelArt.removeRow(tb_articulos.getSelectedRow());
        } else {
            tb_articulos.setValueAt(valorMax - cantidad, tb_articulos.getSelectedRow(), 1);
        }

        //Modificaciones tabla derecha
        String tipo;
        if (esEntrada == true) {
            tipo = "Entrada";
        } else {
            tipo = "Salida";
        }
        int filaExistente = existeenTablaMat(articulo, tipo);
        if (filaExistente > -1) {
            tb_materiales.setValueAt((int) tmodelMat.getValueAt(filaExistente, 1) + cantidad, filaExistente, 1);
        } else {
            Object[] row = new Object[]{articulo, cantidad, tipo};
            tmodelMat.addRow(row);
        }
    }
    
    private int existeenTablaMat(String articulo, String tipo) {
        for (int i = 0; i < tb_materiales.getRowCount(); i++) {
            String art = String.valueOf(tb_materiales.getValueAt(i, 0));
            String tip = String.valueOf(tb_materiales.getValueAt(i, 2));
            if (articulo.equals(art) && tipo.equals(tip)) {
                return i;
            }
        }
        return -1;
    }
    
    private int existeenTablaArt(String articulo) {
        for (int i = 0; i < tb_articulos.getRowCount(); i++) {
            String art = String.valueOf(tb_articulos.getValueAt(i, 0));
            if (articulo.equals(art)) {
                return i;
            }
        }
        return -1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_añadir;
    private javax.swing.JButton btn_añadirEntrada;
    private javax.swing.JButton btn_añadirSalida;
    private javax.swing.JButton btn_sacar;
    private javax.swing.JComboBox<String> cb_centrosTrabajo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tb_articulos;
    private javax.swing.JTable tb_materiales;
    private javax.swing.JTextField txt_manoObra;
    private javax.swing.JTextField txt_maq;
    private javax.swing.JTextField txt_reposo;
    // End of variables declaration//GEN-END:variables
}
